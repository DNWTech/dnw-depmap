{"name":"DNW-depmap","tagline":"Eclipse plug-in, Java, Dependency map","body":"DNW-depmap\r\n=============\r\n\r\nDNW-depmap is an Eclipse plug-in project to create Java code dependency map,\r\nwhich can be used by developers to help them easily find what's the influence of arbitrary code modifications.\r\n\r\nDevelopment Environment\r\n-----------------------\r\n- JDK 1.7 (Neo4j graph database's prerequisites)\r\n- Eclipse 3.7 (code name Indigo)\r\n  - Import [codetemplates.xml](https://github.com/manbaum/dnw-depmap/blob/develop/codetemplates.xml) into ```Preferences|Java|Code Style|Code Templates```.\r\n  - Import [codestyle.xml](https://github.com/manbaum/dnw-depmap/blob/develop/codestyle.xml) into ```Preferences|Java|Code Style|Formatter```.\r\n- Format the code before commit. Thanks.\r\n\r\nGetting Start\r\n-------------\r\n1. Download Neo4j v2.1.5 from [the Neo4j site](http://neo4j.com/download/).\r\n2. Follow [these instructions](http://neo4j.com/docs/2.1.5/deployment.html) to install and deploy a local Neo4j server.\r\n   But do *NOT* start the server at now!\r\n3. Import the forked project into Eclipse (the *first* Eclipse).\r\n4. Configure ```DBPATH``` in ```com.dnw.depmap.Activator.java``` to the database store directory\r\n   of the local Neo4j server.\r\n4. Build and run this project as an ```Eclipse Application``` (the *second* Eclipse).\r\n5. In the second Eclipse, import a Java project into its workspace.\r\n6. Build the Java project to make sure these's no syntax error.\r\n7. In the ```Package Explorer``` window, select one or more Java elements (may be Java files, packages,\r\n   or even the Java project), right click on them and select ```Analysis Dependency``` from the pop-up context menu.\r\n8. Wait for done. (if there are a lot of Java files in the selection, it maybe a long moment.)\r\n9. Close the second Eclipse. (*MUST* close it before the next step!)\r\n10. Startup the local Neo4j server, open a browser and navigate to [http://localhost:7474/browser](http://localhost:7474/browser). \r\n11. Now you can write Neo4j Cypher queries to manipulate the data generated by this program.\r\n    e.g. ```match p=((:Class)-[:Declares]->(:Method)-[:Invokes]->(:Method)<-[:Declares]-(:Class {name:\"java.lang.Object\"})) return p```.\r\n12. Note: Shutdown the local Neo4j server before re-generating data.\r\n\r\nData Model\r\n----------\r\n- Node labeled ```Type``` will also be labeled either ```Class``` or ```Interface```.\r\n- Node labeled ```Class``` denotes a Java class.\r\n  - Property ```name```: the qualified name of the class, with all type parameters replaced with ```'?'```. e.g. ```'java.util.ArrayList<?>'```.\r\n  - Property ```caption```: the simple name (no package name) of the class, with the bound type parameters. e.g. ```'ArrayList<Object>'```.\r\n  - Property ```extends```: the qualified name of its superclass. e.g. ```'java.lang.Object'```. \r\n  - Property ```implements```: an array contains all names of interfaces which implements. e.g. ```['java.util.List<?>']```. \r\n- Node labeled ```Interface``` denotes a Java interface. \r\n  - Property ```name```: the qualified name of the interface, with all type parameters replaced with ```'?'```. e.g. ```'java.util.List<?>'```.\r\n  - Property ```caption```: the simple name (no package name) of the interface, with the bound type parameters. e.g. ```'List<Object>'```. \r\n  - Property ```extends```: an array contains all names of interfaces which extends. e.g. ```['java.util.Collection<?>']```.\r\n- Relation type ```Extends``` denotes the class inheritance happened between two ```Class``` nodes, or the interface inheritance happened between two ```Interface``` nodes.\r\n- Relation type ```Implements``` denotes the interface implementation between a ```Class``` node and a ```Interface``` node.\r\n- Node labeled ```Method``` denotes a Java method.\r\n  - Property ```name```: consists of two parts: 1) the qualified name of its declaring class, 2) the method declaring, made by the method name and all the arguments' type names in parentheses.\r\n    * For a static method, uses ```'/'``` as the delimiter. e.g. ```'java.util.Arrays/asList(java.lang.Object[])'```.\r\n    * For a non-static method, uses ```'#'``` as the delimiter. e.g. ```'java.lang.Object#wait()'```.\r\n  - Property ```caption```: concatenates the method name and the number of declaring arguments in parentheses. e.g. ```'asList(1)'```.\r\n- Relation type ```Declares``` denotes the method declaration, the left/from side should be a ```Type``` node, and the right/to side should be a ```Method``` node.\r\n- Relation type ```Invokes``` denotes the method invocation, it happens between two ```Method``` nodes.\r\n - Property ```args```: an array contains all arguments passed in when the invocation happens.\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2014 DNW Technologies and others.<br/>\r\nAll rights reserved. This program and the accompanying materials<br/>\r\nare made available under the terms of the Eclipse Public License v1.0<br/>\r\nwhich accompanies this distribution, and is available at<br/>\r\nhttp://www.eclipse.org/legal/epl-v10.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}